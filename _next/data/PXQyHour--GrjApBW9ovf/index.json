{"pageProps":{"items":[{"creator":"nazo","title":"ローカルで動かせるLLMを触る","link":"https://zenn.dev/nazo/scraps/f759675dcdc709","pubDate":"Wed, 31 Jan 2024 12:52:40 GMT","dc:creator":"nazo","guid":"https://zenn.dev/nazo/scraps/f759675dcdc709","isoDate":"2024-01-31T12:52:40.000Z"},{"title":"gcloud-aio-bigquery snippet","link":"https://gist.github.com/nazo/527f7ae680fed5e2df919a151ea946a5","pubDate":"2024-01-28T05:23:05.000Z","author":"nazo","content":"  <a href=\"https://gist.github.com/nazo/527f7ae680fed5e2df919a151ea946a5#file-gcloud-aio-bigquery-snippet-py\">gcloud-aio-bigquery-snippet.py</a>\n  <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-gcloud-aio-bigquery-snippet-py\" class=\"file my-2\">\n    \n    <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-python  \">\n\n        \n<div class=\"js-check-bidi js-blob-code-container blob-code-content\">\n\n  <template class=\"js-file-alert-template\">\n  <div data-view-component=\"true\" class=\"flash flash-warn flash-full d-flex flex-items-center\">\n  <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-alert\">\n    <path d=\"M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\"></path>\n</svg>\n    <span>\n      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.\n      <a class=\"Link--inTextBlock\" href=\"https://github.co/hiddenchars\" target=\"_blank\">Learn more about bidirectional Unicode characters</a>\n    </span>\n\n\n  <div data-view-component=\"true\" class=\"flash-action\">        <a href=\"{{ revealButtonHref }}\" data-view-component=\"true\" class=\"btn-sm btn\">    Show hidden characters\n</a>\n</div>\n</div></template>\n<template class=\"js-line-alert-template\">\n  <span aria-label=\"This line has hidden Unicode characters\" data-view-component=\"true\" class=\"line-alert tooltipped tooltipped-e\">\n    <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-alert\">\n    <path d=\"M6.457 1.047c.659-1.234 2.427-1.234 3.086 0l6.082 11.378A1.75 1.75 0 0 1 14.082 15H1.918a1.75 1.75 0 0 1-1.543-2.575Zm1.763.707a.25.25 0 0 0-.44 0L1.698 13.132a.25.25 0 0 0 .22.368h12.164a.25.25 0 0 0 .22-.368Zm.53 3.996v2.5a.75.75 0 0 1-1.5 0v-2.5a.75.75 0 0 1 1.5 0ZM9 11a1 1 0 1 1-2 0 1 1 0 0 1 2 0Z\"></path>\n</svg>\n</span></template>\n\n  <table data-hpc class=\"highlight tab-size js-file-line-container js-code-nav-container js-tagsearch-file\" data-tab-size=\"8\" data-paste-markdown-skip data-tagsearch-lang=\"Python\" data-tagsearch-path=\"gcloud-aio-bigquery-snippet.py\">\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L1\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"1\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>import</span> <span class=pl-s1>asyncio</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L2\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"2\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC2\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>from</span> <span class=pl-s1>collections</span>.<span class=pl-s1>abc</span> <span class=pl-k>import</span> <span class=pl-v>AsyncGenerator</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L3\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"3\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC3\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L4\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"4\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC4\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>import</span> <span class=pl-s1>aiohttp</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L5\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"5\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC5\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>from</span> <span class=pl-s1>gcloud</span>.<span class=pl-s1>aio</span>.<span class=pl-s1>bigquery</span> <span class=pl-k>import</span> <span class=pl-v>Job</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L6\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"6\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC6\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>from</span> <span class=pl-s1>google</span>.<span class=pl-s1>cloud</span> <span class=pl-k>import</span> <span class=pl-s1>bigquery</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L7\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"7\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC7\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>from</span> <span class=pl-s1>google</span>.<span class=pl-s1>cloud</span>.<span class=pl-s1>bigquery</span>.<span class=pl-s1>_helpers</span> <span class=pl-k>import</span> <span class=pl-s1>_rows_from_json</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L8\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"8\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC8\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>from</span> <span class=pl-s1>google</span>.<span class=pl-s1>cloud</span>.<span class=pl-s1>bigquery</span>.<span class=pl-s1>table</span> <span class=pl-k>import</span> <span class=pl-s1>_parse_schema_resource</span>  <span class=pl-c># type:ignore</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L9\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"9\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC9\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L10\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"10\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC10\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L11\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"11\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC11\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>async</span> <span class=pl-k>def</span> <span class=pl-en>query</span>(</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L12\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"12\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC12\" class=\"blob-code blob-code-inner js-file-line\">    <span class=pl-s1>sql</span>: <span class=pl-s1>str</span>, <span class=pl-s1>max_results</span>: <span class=pl-s1>int</span> <span class=pl-c1>=</span> <span class=pl-c1>100</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L13\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"13\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC13\" class=\"blob-code blob-code-inner js-file-line\">) <span class=pl-c1>-&gt;</span> <span class=pl-v>AsyncGenerator</span>[<span class=pl-s1>list</span>[<span class=pl-s1>bigquery</span>.<span class=pl-v>Row</span>], <span class=pl-c1>None</span>]:</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L14\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"14\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC14\" class=\"blob-code blob-code-inner js-file-line\">    <span class=pl-s1>loop</span> <span class=pl-c1>=</span> <span class=pl-s1>asyncio</span>.<span class=pl-en>get_running_loop</span>()</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L15\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"15\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC15\" class=\"blob-code blob-code-inner js-file-line\">    <span class=pl-k>async</span> <span class=pl-k>with</span> <span class=pl-s1>aiohttp</span>.<span class=pl-v>ClientSession</span>(<span class=pl-s1>loop</span><span class=pl-c1>=</span><span class=pl-s1>loop</span>) <span class=pl-k>as</span> <span class=pl-s1>session</span>:</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L16\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"16\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC16\" class=\"blob-code blob-code-inner js-file-line\">        <span class=pl-s1>job</span> <span class=pl-c1>=</span> <span class=pl-v>Job</span>(<span class=pl-s1>session</span><span class=pl-c1>=</span><span class=pl-s1>session</span>)</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L17\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"17\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC17\" class=\"blob-code blob-code-inner js-file-line\">        <span class=pl-s1>query_request</span> <span class=pl-c1>=</span> {</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L18\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"18\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC18\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-s>&quot;query&quot;</span>: <span class=pl-s1>sql</span>,</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L19\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"19\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC19\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-s>&quot;maxResults&quot;</span>: <span class=pl-s1>max_results</span>,</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L20\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"20\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC20\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-s>&quot;useLegacySql&quot;</span>: <span class=pl-s>&quot;false&quot;</span>,</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L21\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"21\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC21\" class=\"blob-code blob-code-inner js-file-line\">        }</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L22\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"22\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC22\" class=\"blob-code blob-code-inner js-file-line\">        <span class=pl-s1>response</span> <span class=pl-c1>=</span> <span class=pl-k>await</span> <span class=pl-s1>job</span>.<span class=pl-en>query</span>(<span class=pl-s1>query_request</span><span class=pl-c1>=</span><span class=pl-s1>query_request</span>)</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L23\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"23\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC23\" class=\"blob-code blob-code-inner js-file-line\">        <span class=pl-k>while</span> <span class=pl-c1>True</span>:</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L24\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"24\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC24\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-s1>errors</span> <span class=pl-c1>=</span> <span class=pl-s1>response</span>.<span class=pl-en>get</span>(<span class=pl-s>&quot;errors&quot;</span>)</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L25\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"25\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC25\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-s1>page_token</span> <span class=pl-c1>=</span> <span class=pl-s1>response</span>.<span class=pl-en>get</span>(<span class=pl-s>&quot;pageToken&quot;</span>)</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L26\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"26\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC26\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-k>if</span> <span class=pl-s1>errors</span> <span class=pl-c1>is</span> <span class=pl-c1>not</span> <span class=pl-c1>None</span>:</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L27\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"27\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC27\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-k>raise</span> <span class=pl-v>RuntimeError</span>(<span class=pl-s1>errors</span>)</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L28\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"28\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC28\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-k>if</span> <span class=pl-s1>response</span>.<span class=pl-en>get</span>(<span class=pl-s>&quot;jobComplete&quot;</span>):</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L29\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"29\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC29\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-k>if</span> <span class=pl-en>int</span>(<span class=pl-s1>response</span>.<span class=pl-en>get</span>(<span class=pl-s>&quot;totalRows&quot;</span>, <span class=pl-c1>0</span>)) <span class=pl-c1>==</span> <span class=pl-c1>0</span>:</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L30\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"30\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC30\" class=\"blob-code blob-code-inner js-file-line\">                    <span class=pl-k>return</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L31\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"31\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC31\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-s1>schema</span> <span class=pl-c1>=</span> <span class=pl-en>_parse_schema_resource</span>(<span class=pl-s1>response</span>.<span class=pl-en>get</span>(<span class=pl-s>&quot;schema&quot;</span>, {}))</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L32\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"32\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC32\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-k>yield</span> <span class=pl-en>_rows_from_json</span>(<span class=pl-s1>response</span>.<span class=pl-en>get</span>(<span class=pl-s>&quot;rows&quot;</span>, ()), <span class=pl-s1>schema</span>)</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L33\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"33\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC33\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-k>if</span> <span class=pl-s1>page_token</span> <span class=pl-c1>is</span> <span class=pl-c1>None</span>:</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L34\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"34\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC34\" class=\"blob-code blob-code-inner js-file-line\">                    <span class=pl-k>return</span></td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L35\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"35\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC35\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-k>else</span>:</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L36\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"36\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC36\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-k>await</span> <span class=pl-s1>asyncio</span>.<span class=pl-en>sleep</span>(<span class=pl-c1>1.0</span>)</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L37\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"37\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC37\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-s1>job</span> <span class=pl-c1>=</span> <span class=pl-v>Job</span>(</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L38\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"38\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC38\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-s1>job_id</span><span class=pl-c1>=</span><span class=pl-s1>response</span>[<span class=pl-s>&quot;jobReference&quot;</span>][<span class=pl-s>&quot;jobId&quot;</span>],</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L39\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"39\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC39\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-s1>project</span><span class=pl-c1>=</span><span class=pl-s1>response</span>[<span class=pl-s>&quot;jobReference&quot;</span>][<span class=pl-s>&quot;projectId&quot;</span>],</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L40\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"40\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC40\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-s1>session</span><span class=pl-c1>=</span><span class=pl-s1>session</span>,</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L41\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"41\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC41\" class=\"blob-code blob-code-inner js-file-line\">            )</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L42\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"42\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC42\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-s1>params</span> <span class=pl-c1>=</span> {</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L43\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"43\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC43\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-s>&quot;location&quot;</span>: <span class=pl-s1>response</span>[<span class=pl-s>&quot;jobReference&quot;</span>][<span class=pl-s>&quot;location&quot;</span>],</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L44\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"44\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC44\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-s>&quot;maxResults&quot;</span>: <span class=pl-s1>max_results</span>,</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L45\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"45\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC45\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-s>&quot;pageToken&quot;</span>: <span class=pl-s1>page_token</span>,</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L46\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"46\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC46\" class=\"blob-code blob-code-inner js-file-line\">            }</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L47\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"47\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC47\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-s1>response</span> <span class=pl-c1>=</span> <span class=pl-k>await</span> <span class=pl-s1>job</span>.<span class=pl-en>get_query_results</span>(<span class=pl-s1>params</span><span class=pl-c1>=</span><span class=pl-s1>params</span>)</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L48\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"48\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC48\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L49\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"49\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC49\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L50\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"50\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC50\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>async</span> <span class=pl-k>def</span> <span class=pl-en>main</span>() <span class=pl-c1>-&gt;</span> <span class=pl-c1>None</span>:</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L51\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"51\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC51\" class=\"blob-code blob-code-inner js-file-line\">    <span class=pl-k>async</span> <span class=pl-k>for</span> <span class=pl-s1>rows</span> <span class=pl-c1>in</span> <span class=pl-en>query</span>(<span class=pl-s>&quot;SELECT * FROM `project_id.dataset_id.table`&quot;</span>):</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L52\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"52\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC52\" class=\"blob-code blob-code-inner js-file-line\">        <span class=pl-k>for</span> <span class=pl-s1>row</span> <span class=pl-c1>in</span> <span class=pl-s1>rows</span>:</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L53\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"53\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC53\" class=\"blob-code blob-code-inner js-file-line\">            <span class=pl-k>for</span> <span class=pl-s1>key</span>, <span class=pl-s1>value</span> <span class=pl-c1>in</span> <span class=pl-s1>row</span>.<span class=pl-en>items</span>():</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L54\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"54\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC54\" class=\"blob-code blob-code-inner js-file-line\">                <span class=pl-en>print</span>(<span class=pl-s>f&quot;<span class=pl-s1><span class=pl-kos>{</span><span class=pl-s1>key</span><span class=pl-kos>}</span></span>=<span class=pl-s1><span class=pl-kos>{</span><span class=pl-s1>value</span><span class=pl-kos>}</span></span>&quot;</span>)</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L55\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"55\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC55\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L56\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"56\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC56\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L57\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"57\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC57\" class=\"blob-code blob-code-inner js-file-line\"><span class=pl-k>if</span> <span class=pl-s1>__name__</span> <span class=pl-c1>==</span> <span class=pl-s>&quot;__main__&quot;</span>:</td>\n        </tr>\n        <tr>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-L58\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" data-line-number=\"58\"></td>\n          <td id=\"file-gcloud-aio-bigquery-snippet-py-LC58\" class=\"blob-code blob-code-inner js-file-line\">    <span class=pl-s1>asyncio</span>.<span class=pl-en>run</span>(<span class=pl-en>main</span>())</td>\n        </tr>\n  </table>\n</div>\n\n\n    </div>\n\n  </div>\n</div>\n\n","contentSnippet":"gcloud-aio-bigquery-snippet.py\n  \n\n\n    \n      This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters.\n      Learn more about bidirectional Unicode characters\n    \n\n\n  \n            Show hidden characters\n\n\n\n\n  \n    \n    \n\n\n\n\n  \n\n          import asyncio\n        \n\n          from collections.abc import AsyncGenerator\n        \n\n          \n\n        \n\n          import aiohttp\n        \n\n          from gcloud.aio.bigquery import Job\n        \n\n          from google.cloud import bigquery\n        \n\n          from google.cloud.bigquery._helpers import _rows_from_json\n        \n\n          from google.cloud.bigquery.table import _parse_schema_resource  # type:ignore\n        \n\n          \n\n        \n\n          \n\n        \n\n          async def query(\n        \n\n              sql: str, max_results: int = 100\n        \n\n          ) -> AsyncGenerator[list[bigquery.Row], None]:\n        \n\n              loop = asyncio.get_running_loop()\n        \n\n              async with aiohttp.ClientSession(loop=loop) as session:\n        \n\n                  job = Job(session=session)\n        \n\n                  query_request = {\n        \n\n                      \"query\": sql,\n        \n\n                      \"maxResults\": max_results,\n        \n\n                      \"useLegacySql\": \"false\",\n        \n\n                  }\n        \n\n                  response = await job.query(query_request=query_request)\n        \n\n                  while True:\n        \n\n                      errors = response.get(\"errors\")\n        \n\n                      page_token = response.get(\"pageToken\")\n        \n\n                      if errors is not None:\n        \n\n                          raise RuntimeError(errors)\n        \n\n                      if response.get(\"jobComplete\"):\n        \n\n                          if int(response.get(\"totalRows\", 0)) == 0:\n        \n\n                              return\n        \n\n                          schema = _parse_schema_resource(response.get(\"schema\", {}))\n        \n\n                          yield _rows_from_json(response.get(\"rows\", ()), schema)\n        \n\n                          if page_token is None:\n        \n\n                              return\n        \n\n                      else:\n        \n\n                          await asyncio.sleep(1.0)\n        \n\n                      job = Job(\n        \n\n                          job_id=response[\"jobReference\"][\"jobId\"],\n        \n\n                          project=response[\"jobReference\"][\"projectId\"],\n        \n\n                          session=session,\n        \n\n                      )\n        \n\n                      params = {\n        \n\n                          \"location\": response[\"jobReference\"][\"location\"],\n        \n\n                          \"maxResults\": max_results,\n        \n\n                          \"pageToken\": page_token,\n        \n\n                      }\n        \n\n                      response = await job.get_query_results(params=params)\n        \n\n          \n\n        \n\n          \n\n        \n\n          async def main() -> None:\n        \n\n              async for rows in query(\"SELECT * FROM `project_id.dataset_id.table`\"):\n        \n\n                  for row in rows:\n        \n\n                      for key, value in row.items():\n        \n\n                          print(f\"{key}={value}\")\n        \n\n          \n\n        \n\n          \n\n        \n\n          if __name__ == \"__main__\":\n        \n\n              asyncio.run(main())","id":"tag:gist.github.com,2008:Gist/nazo/527f7ae680fed5e2df919a151ea946a5","isoDate":"2024-01-28T05:23:05.000Z"},{"title":"gcloud-aio-bigqueryでasync/awaitを使ってBigQueryのクエリを叩く","link":"https://nazo.hatenablog.com/entry/gcloud-aio-bigquery","pubDate":"2024-01-09T03:00:00.000Z","author":"nazone","content":"<p><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Python\">Python</a>からBigQueryを叩くには公式の <a href=\"https://pypi.org/project/google-cloud-bigquery/\">google-cloud-bigquery</a> があるのですが、asyncioに対応していません。</p>\n\n<p>一部のライブラリではv2側でasyncioに対応しているのですが、BigQueryはv2でも対応していないように見えます。ちなみにv1はほとんどの実装で<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/REST%20API\">REST API</a>を叩いて、v2はほとんどの実装でRPC <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/API\">API</a>を叩いています（どちらも全部確認したわけではありません）。一部のライブラリでv2のほうを叩くとサーバーエラーが多発したこともあり、今のところなるべくv1でasyncioを使用したいです。</p>\n\n<p><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/GCP\">GCP</a>の<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Python\">Python</a>ライブラリをasyncioで動くように書き換えたものが <a href=\"https://github.com/talkiq/gcloud-aio\">gcloud-aio</a> で用意されており、その中に <a href=\"https://pypi.org/project/gcloud-aio-bigquery/\">gcloud-aio-bigquery</a> があります。あまり使われているのを見かけませんが、<a href=\"https://github.com/apache/airflow/blob/08f6e2e5d21382494597e6cac66725bc85729656/airflow/providers/google/provider.yaml#L89C1-L91\">AirflowのGCP周りの一部で使われている</a>ようです。</p>\n\n<p>ただし<a href=\"https://cloud.google.com/bigquery/docs/reference/rest\">REST API</a>そのままの実装になっているため、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/REST%20API\">REST API</a>の知識が必要です。手軽に使えるとは言い難いです。</p>\n\n<h1 id=\"REST-APIでの流れ\"><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/REST%20API\">REST API</a>での流れ</h1>\n\n<p>まずクエリを実行するには <a href=\"https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/query\">jobs.query</a> を呼びます。</p>\n\n<p>代表的なパラメーターは以下の通りです。</p>\n\n<ul>\n<li>query : 必須。<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SQL\">SQL</a>クエリを指定する。</li>\n<li>maxResults : １レスポンスに含まれる行数。指定しなくてもバイト数でページングされるが、指定しておいたほうが安全。</li>\n<li>timeoutMs : <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%A2%A5%A6%A5%C8\">タイムアウト</a>の秒数</li>\n<li>useLegacySql : BigQueryのレガシー<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SQL\">SQL</a>を使用するかどうか。デフォルトtrueなのでfalseを指定しておいたほうがいい。</li>\n</ul>\n\n\n<p>実行するとジョブが作成されます。</p>\n\n<p>レスポンスを確認してデータが完結しているか確認します。 <code>jobComplete</code> が true の場合、ジョブが完了して結果の行を取得できる状態です。この場合、 <code>rows</code> に結果の行が含まれています。また、 <code>schema</code> に<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A1%BC%A5%DE\">スキーマ</a>が含まれています。 <code>rows</code> だけ見てもどの列の何のデータがの判別が難しいので、 <code>schema</code> と合わせて確認します。</p>\n\n<p><code>jobComplete</code> が true で、 <code>pageToken</code> が含まれている場合、まだ読み込むべきデータが残っているので続きを読み込みます。 <code>pageToken</code> が無ければ終了です。</p>\n\n<p>データが完結していない場合は、レスポンスの <code>jobReference</code> の <code>jobId</code> を拾って、（ <code>pageToken</code> があればそれも一緒に）  <a href=\"https://cloud.google.com/bigquery/docs/reference/rest/v2/jobs/getQueryResults\">jobs.getQueryResults</a> を実行します。結果は jobs.query と同じです。</p>\n\n<p>全体の流れをまとめると以下のようになります。</p>\n\n<ul>\n<li>jobs.query でジョブを作成</li>\n<li>jobComplete が true なら\n\n<ul>\n<li>rows がない（totalRows=0）→終了</li>\n<li>rows がある→そのデータを使う</li>\n<li>pageToken がない→終了</li>\n</ul>\n</li>\n<li>jobComplete が false 、または pageToken がある→ jobs.getQueryResults を実行し、上の判定ロジックに戻る</li>\n</ul>\n\n\n<h1 id=\"実際に使ってみる\">実際に使ってみる</h1>\n\n<p>実際に動くものが以下になります。</p>\n\n<pre class=\"code lang-python\" data-lang=\"python\" data-unlink><span class=\"synPreProc\">import</span> asyncio\n<span class=\"synPreProc\">from</span> collections.abc <span class=\"synPreProc\">import</span> AsyncGenerator\n\n<span class=\"synPreProc\">import</span> aiohttp\n<span class=\"synPreProc\">from</span> gcloud.aio.bigquery <span class=\"synPreProc\">import</span> Job\n<span class=\"synPreProc\">from</span> google.cloud <span class=\"synPreProc\">import</span> bigquery\n<span class=\"synPreProc\">from</span> google.cloud.bigquery._helpers <span class=\"synPreProc\">import</span> _rows_from_json\n<span class=\"synPreProc\">from</span> google.cloud.bigquery.table <span class=\"synPreProc\">import</span> _parse_schema_resource  <span class=\"synComment\"># type:ignore</span>\n\n\n<span class=\"synStatement\">async</span> <span class=\"synStatement\">def</span> <span class=\"synIdentifier\">query</span>(\n    sql: <span class=\"synIdentifier\">str</span>, max_results: <span class=\"synIdentifier\">int</span> = <span class=\"synConstant\">100</span>\n) -&gt; AsyncGenerator[<span class=\"synIdentifier\">list</span>[bigquery.Row], <span class=\"synIdentifier\">None</span>]:\n    loop = asyncio.get_running_loop()\n    <span class=\"synStatement\">async</span> <span class=\"synStatement\">with</span> aiohttp.ClientSession(loop=loop) <span class=\"synStatement\">as</span> session:\n        job = Job(session=session)\n        query_request = {\n            <span class=\"synConstant\">&quot;query&quot;</span>: sql,\n            <span class=\"synConstant\">&quot;maxResults&quot;</span>: max_results,\n            <span class=\"synConstant\">&quot;useLegacySql&quot;</span>: <span class=\"synConstant\">&quot;false&quot;</span>,\n        }\n        response = <span class=\"synStatement\">await</span> job.query(query_request=query_request)\n        <span class=\"synStatement\">while</span> <span class=\"synIdentifier\">True</span>:\n            errors = response.get(<span class=\"synConstant\">&quot;errors&quot;</span>)\n            page_token = response.get(<span class=\"synConstant\">&quot;pageToken&quot;</span>)\n            <span class=\"synStatement\">if</span> errors <span class=\"synStatement\">is</span> <span class=\"synStatement\">not</span> <span class=\"synIdentifier\">None</span>:\n                <span class=\"synStatement\">raise</span> <span class=\"synType\">RuntimeError</span>(errors)\n            <span class=\"synStatement\">if</span> response.get(<span class=\"synConstant\">&quot;jobComplete&quot;</span>):\n                <span class=\"synStatement\">if</span> <span class=\"synIdentifier\">int</span>(response.get(<span class=\"synConstant\">&quot;totalRows&quot;</span>, <span class=\"synConstant\">0</span>)) == <span class=\"synConstant\">0</span>:\n                    <span class=\"synStatement\">return</span>\n                schema = _parse_schema_resource(response.get(<span class=\"synConstant\">&quot;schema&quot;</span>, {}))\n                <span class=\"synStatement\">yield</span> _rows_from_json(response.get(<span class=\"synConstant\">&quot;rows&quot;</span>, ()), schema)\n                <span class=\"synStatement\">if</span> page_token <span class=\"synStatement\">is</span> <span class=\"synIdentifier\">None</span>:\n                    <span class=\"synStatement\">return</span>\n            <span class=\"synStatement\">else</span>:\n                <span class=\"synStatement\">await</span> asyncio.sleep(<span class=\"synConstant\">1.0</span>)  <span class=\"synComment\"># 終わってなさそうなので少し待つ</span>\n            <span class=\"synComment\"># ジョブの結果を確認</span>\n            job = Job(\n                job_id=response[<span class=\"synConstant\">&quot;jobReference&quot;</span>][<span class=\"synConstant\">&quot;jobId&quot;</span>],\n                project=response[<span class=\"synConstant\">&quot;jobReference&quot;</span>][<span class=\"synConstant\">&quot;projectId&quot;</span>],\n                session=session,\n            )\n            params = {\n                <span class=\"synConstant\">&quot;location&quot;</span>: response[<span class=\"synConstant\">&quot;jobReference&quot;</span>][<span class=\"synConstant\">&quot;location&quot;</span>],\n                <span class=\"synConstant\">&quot;maxResults&quot;</span>: max_results,\n                <span class=\"synConstant\">&quot;pageToken&quot;</span>: page_token,\n            }\n            response = <span class=\"synStatement\">await</span> job.get_query_results(params=params)\n\n\n<span class=\"synStatement\">async</span> <span class=\"synStatement\">def</span> <span class=\"synIdentifier\">main</span>() -&gt; <span class=\"synIdentifier\">None</span>:\n    <span class=\"synStatement\">async</span> <span class=\"synStatement\">for</span> rows <span class=\"synStatement\">in</span> query(<span class=\"synConstant\">&quot;SELECT * FROM `project_id.dataset_id.table`&quot;</span>):\n        <span class=\"synStatement\">for</span> row <span class=\"synStatement\">in</span> rows:\n            <span class=\"synComment\"># row[&quot;key&quot;] で値を取得可能</span>\n            <span class=\"synStatement\">for</span> key, value <span class=\"synStatement\">in</span> row.items():\n                <span class=\"synIdentifier\">print</span>(f<span class=\"synConstant\">&quot;{key}={value}&quot;</span>)\n\n\n<span class=\"synStatement\">if</span> __name__ == <span class=\"synConstant\">&quot;__main__&quot;</span>:\n    asyncio.run(main())\n</pre>\n\n\n<p>雑に書いているので必要に応じて書き換えてください。<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%A2%A5%A6%A5%C8\">タイムアウト</a>の設定や例外の処理などが別途必要になります。</p>\n\n<p>結果行の整形に公式の <code>google-cloud-bigquery</code> も使っています。また、 <code>aiohttp</code> パッケージも必要です。</p>\n\n<p>プロジェクトIDを指定したい場合は Job のコンスト<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%E9%A5%AF\">ラク</a>タで指定してもいいですし、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%B4%C4%B6%AD%CA%D1%BF%F4\">環境変数</a> <code>GOOGLE_CLOUD_PROJECT</code> などで指定しても反映されます。</p>\n\n<h1 id=\"まとめ\">まとめ</h1>\n\n<p>公式で対応してほしいです。</p>\n","contentSnippet":"PythonからBigQueryを叩くには公式の google-cloud-bigquery があるのですが、asyncioに対応していません。\n一部のライブラリではv2側でasyncioに対応しているのですが、BigQueryはv2でも対応していないように見えます。ちなみにv1はほとんどの実装でREST APIを叩いて、v2はほとんどの実装でRPC APIを叩いています（どちらも全部確認したわけではありません）。一部のライブラリでv2のほうを叩くとサーバーエラーが多発したこともあり、今のところなるべくv1でasyncioを使用したいです。\nGCPのPythonライブラリをasyncioで動くように書き換えたものが gcloud-aio で用意されており、その中に gcloud-aio-bigquery があります。あまり使われているのを見かけませんが、AirflowのGCP周りの一部で使われているようです。\nただしREST APIそのままの実装になっているため、REST APIの知識が必要です。手軽に使えるとは言い難いです。\nREST APIでの流れ\nまずクエリを実行するには jobs.query を呼びます。\n代表的なパラメーターは以下の通りです。\nquery : 必須。SQLクエリを指定する。\nmaxResults : １レスポンスに含まれる行数。指定しなくてもバイト数でページングされるが、指定しておいたほうが安全。\ntimeoutMs : タイムアウトの秒数\nuseLegacySql : BigQueryのレガシーSQLを使用するかどうか。デフォルトtrueなのでfalseを指定しておいたほうがいい。\n実行するとジョブが作成されます。\nレスポンスを確認してデータが完結しているか確認します。 jobComplete が true の場合、ジョブが完了して結果の行を取得できる状態です。この場合、 rows に結果の行が含まれています。また、 schema にスキーマが含まれています。 rows だけ見てもどの列の何のデータがの判別が難しいので、 schema と合わせて確認します。\njobComplete が true で、 pageToken が含まれている場合、まだ読み込むべきデータが残っているので続きを読み込みます。 pageToken が無ければ終了です。\nデータが完結していない場合は、レスポンスの jobReference の jobId を拾って、（ pageToken があればそれも一緒に）  jobs.getQueryResults を実行します。結果は jobs.query と同じです。\n全体の流れをまとめると以下のようになります。\njobs.query でジョブを作成\njobComplete が true なら\n\n\nrows がない（totalRows=0）→終了\nrows がある→そのデータを使う\npageToken がない→終了\njobComplete が false 、または pageToken がある→ jobs.getQueryResults を実行し、上の判定ロジックに戻る\n実際に使ってみる\n実際に動くものが以下になります。\nimport asyncio\nfrom collections.abc import AsyncGenerator\n\nimport aiohttp\nfrom gcloud.aio.bigquery import Job\nfrom google.cloud import bigquery\nfrom google.cloud.bigquery._helpers import _rows_from_json\nfrom google.cloud.bigquery.table import _parse_schema_resource  # type:ignore\n\n\nasync def query(\n    sql: str, max_results: int = 100\n) -> AsyncGenerator[list[bigquery.Row], None]:\n    loop = asyncio.get_running_loop()\n    async with aiohttp.ClientSession(loop=loop) as session:\n        job = Job(session=session)\n        query_request = {\n            \"query\": sql,\n            \"maxResults\": max_results,\n            \"useLegacySql\": \"false\",\n        }\n        response = await job.query(query_request=query_request)\n        while True:\n            errors = response.get(\"errors\")\n            page_token = response.get(\"pageToken\")\n            if errors is not None:\n                raise RuntimeError(errors)\n            if response.get(\"jobComplete\"):\n                if int(response.get(\"totalRows\", 0)) == 0:\n                    return\n                schema = _parse_schema_resource(response.get(\"schema\", {}))\n                yield _rows_from_json(response.get(\"rows\", ()), schema)\n                if page_token is None:\n                    return\n            else:\n                await asyncio.sleep(1.0)  # 終わってなさそうなので少し待つ\n            # ジョブの結果を確認\n            job = Job(\n                job_id=response[\"jobReference\"][\"jobId\"],\n                project=response[\"jobReference\"][\"projectId\"],\n                session=session,\n            )\n            params = {\n                \"location\": response[\"jobReference\"][\"location\"],\n                \"maxResults\": max_results,\n                \"pageToken\": page_token,\n            }\n            response = await job.get_query_results(params=params)\n\n\nasync def main() -> None:\n    async for rows in query(\"SELECT * FROM `project_id.dataset_id.table`\"):\n        for row in rows:\n            # row[\"key\"] で値を取得可能\n            for key, value in row.items():\n                print(f\"{key}={value}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n\n\n\n雑に書いているので必要に応じて書き換えてください。タイムアウトの設定や例外の処理などが別途必要になります。\n結果行の整形に公式の google-cloud-bigquery も使っています。また、 aiohttp パッケージも必要です。\nプロジェクトIDを指定したい場合は Job のコンストラクタで指定してもいいですし、環境変数 GOOGLE_CLOUD_PROJECT などで指定しても反映されます。\nまとめ\n公式で対応してほしいです。","summary":"PythonからBigQueryを叩くには公式の google-cloud-bigquery があるのですが、asyncioに対応していません。 一部のライブラリではv2側でasyncioに対応しているのですが、BigQueryはv2でも対応していないように見えます。ちなみにv1はほとんどの実装でREST APIを叩いて、v2はほとんどの実装でRPC APIを叩いています（どちらも全部確認したわけではありません）。一部のライブラリでv2のほうを叩くとサーバーエラーが多発したこともあり、今のところなるべくv1でasyncioを使用したいです。 GCPのPythonライブラリをasyncioで動く…","id":"hatenablog://entry/6801883189072194905","isoDate":"2024-01-09T03:00:00.000Z"},{"creator":"nazo","title":"gcloud-aio-bigqueryでasync/awaitを使ってBigQueryのクエリを叩く","link":"https://zenn.dev/nazo/articles/9a75cc18e9d6ca","pubDate":"Tue, 09 Jan 2024 03:00:00 GMT","enclosure":{"url":"https://res.cloudinary.com/zenn/image/upload/s--mGw2hULs--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:gcloud-aio-bigquery%25E3%2581%25A7async%252Fawait%25E3%2582%2592%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6BigQuery%25E3%2581%25AE%25E3%2582%25AF%25E3%2582%25A8%25E3%2583%25AA%25E3%2582%2592%25E5%258F%25A9%25E3%2581%258F%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nazo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dZb0xlSnJaX3FJdGlhbThncXZyVkhIVUxRSXFWcUs5VGNqaXp1MWo4PXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png","length":"0","type":"image/png"},"dc:creator":"nazo","content":"PythonからBigQueryを叩くには公式の google-cloud-bigquery があるのですが、asyncioに対応していません。\n一部のライブラリではv2側でasyncioに対応しているのですが、BigQueryはv2でも対応していないように見えます。ちなみにv1はほとんどの実装でREST APIを叩いて、v2はほとんどの実装でRPC APIを叩いています（どちらも全部確認したわけではありません）。一部のライブラリでv2のほうを叩くとサーバーエラーが多発したこともあり、今のところなるべくv1でasyncioを使用したいです。\nGCPのPythonライブラリをasyncio...","contentSnippet":"PythonからBigQueryを叩くには公式の google-cloud-bigquery があるのですが、asyncioに対応していません。\n一部のライブラリではv2側でasyncioに対応しているのですが、BigQueryはv2でも対応していないように見えます。ちなみにv1はほとんどの実装でREST APIを叩いて、v2はほとんどの実装でRPC APIを叩いています（どちらも全部確認したわけではありません）。一部のライブラリでv2のほうを叩くとサーバーエラーが多発したこともあり、今のところなるべくv1でasyncioを使用したいです。\nGCPのPythonライブラリをasyncio...","guid":"https://zenn.dev/nazo/articles/9a75cc18e9d6ca","isoDate":"2024-01-09T03:00:00.000Z"},{"title":"nazoさんの2023年とこれから（お仕事募集中です！！）","link":"https://nazo.hatenablog.com/entry/2023-works","pubDate":"2023-12-29T03:00:00.000Z","author":"nazone","content":"<ul>\n<li>2022年 : <a href=\"https://nazo.hatenablog.com/entry/2022-works\">https://nazo.hatenablog.com/entry/2022-works</a></li>\n<li>2021年 : <a href=\"https://nazo.hatenablog.com/entry/2021-works\">https://nazo.hatenablog.com/entry/2021-works</a></li>\n<li>2020年 : <a href=\"https://nazo.hatenablog.com/entry/2020-works\">https://nazo.hatenablog.com/entry/2020-works</a></li>\n<li>2019年 : <a href=\"https://nazo.hatenablog.com/entry/goodbye-uuum\">https://nazo.hatenablog.com/entry/goodbye-uuum</a></li>\n</ul>\n\n\n<h1 id=\"何してたの\">何してたの？</h1>\n\n<p>一応、仕事しています。</p>\n\n<p>あまり細かいことは言えないのですが、<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Python\">Python</a>でGraphQLでBigQuery x <a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/BigTable\">BigTable</a>でPub/Subで…とかしつつ開発組織の<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%B5%A5%EB%A5%C6%A5%A3%A5%F3%A5%B0\">コンサルティング</a>的なこともしていました。キューでタスクを分割する仕組みが思ったより快適すぎるので今後もっと使っていきたいと思いました。</p>\n\n<p>最近の<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Python\">Python</a>は型検査にasync/awaitとか使えて快適ですね。開発環境は<a href=\"https://github.com/mitsuhiko/rye\">rye</a>で、black+mypy+ruff で各種検査を回しまくると<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/VSCode\">VSCode</a>で自動修正やら補完やらが効きまくって今までの<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Python\">Python</a>とは別世界です。強いて言えば各種ライブラリ（特に<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Google\">Google</a>系）が最新のあれこれに対応していなかったりするのが難点ですね。</p>\n\n<p><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/GitHub\">GitHub</a> Copliotが優秀すぎてコードの書き方より指示コメントの書き方がうまくなってきました。テストケースなんかも半自動生成できて、ちまちま作ってたようなものがどんどん楽になりますね。Codeじゃない<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/VIsual%20Studio\">VIsual Studio</a>だと標準で入っているので、Unityを書くのとかでもものすごく楽になりました。知ってるか知らないか、知っていたら勝ちみたいな領域で勝負していた方々は今後辛いんじゃないでしょうか。</p>\n\n<h1 id=\"SNS断ち特にX\"><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SNS\">SNS</a>断ち（特にX）</h1>\n\n<p>もう存在を忘れられているかと思いますが、結構前から<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SNS\">SNS</a>をほぼ引退しました。X（旧<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Twitter\">Twitter</a>）も<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/Facebook\">Facebook</a>も過去の投稿をほぼ全て削除してありますし、特殊な事情がない限り告知以外の投稿をすることはもうありません。この記事の通知は流れているはずなので、<a href=\"https://x.com/nazo\">https://x.com/nazo</a> は告知用アカウントだと思ってください。</p>\n\n<p>理由としては、コロナ禍あたりからの空気の変化により、少なくともXを使い続けるのは自分にとってメリットよりデメリットのほうが上回ってきたからです。X社関係の騒動とはあまり関係ありません。</p>\n\n<p>このブログは<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SNS\">SNS</a>ではないので、基本的にこのブログは更新し続けるつもりです。</p>\n\n<p>一応Blueskyのアカウント（ <a href=\"https://bsky.app/profile/nazonazo.bsky.social\">https://bsky.app/profile/nazonazo.bsky.social</a> ）も取得してあり、万が一普段遣いとして復帰したくなった場合はこちらを使うかもしれませんが、まあそれも今のところはなさそうです。</p>\n\n<p><a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SNS\">SNS</a>断ちをして思ったことは、思ったより<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SNS\">SNS</a>を見てメールをくれたり連絡をしてくれたりする人というのはいたんだなということです。<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SNS\">SNS</a>を動かしている間はそれなりに反応があったのですが、断ってからはスパム的なもの以外は全く来なくなってしまいました。まあブログくらい書いていればもう少し違うのでしょうが…。</p>\n\n<p>交友関係もほぼ断ってしまったので、すっかりお仕事の話も途絶えてしまいました。難しい話です。</p>\n\n<h1 id=\"今後について\">今後について</h1>\n\n<p>今の生活はとても自分に合っているので、できれば今の生活を続けていきたいのですが、特にこの先の見通しもないし収入面の不安もあるので難しそうです。</p>\n\n<p>自分ももうすぐ42歳になり、日に日に体力も衰え、絶対にこれをやるんだ！みたいなモチベーションはもうないのですが、成功事例も増えてきましたし、自分にしかできないことも少なくないはずなので、淡々とできることをこなしていこうと思います。</p>\n\n<h1 id=\"お仕事募集中\">お仕事募集中</h1>\n\n<p>引き続きお仕事を募集しております。週２〜４くらいまで・フルリモート・単価多分そこそこ高め？です。解決できる課題などは\n<a href=\"https://nazo.dev/profile\">https://nazo.dev/profile</a> をご覧下さい。フルタイム正社員でないからこそできる内容をメインにしています。</p>\n\n<p>各種<a class=\"keyword\" href=\"https://d.hatena.ne.jp/keyword/SNS\">SNS</a>のDMでご連絡をお待ちしております。</p>\n","contentSnippet":"2022年 : https://nazo.hatenablog.com/entry/2022-works\n2021年 : https://nazo.hatenablog.com/entry/2021-works\n2020年 : https://nazo.hatenablog.com/entry/2020-works\n2019年 : https://nazo.hatenablog.com/entry/goodbye-uuum\n何してたの？\n一応、仕事しています。\nあまり細かいことは言えないのですが、PythonでGraphQLでBigQuery x BigTableでPub/Subで…とかしつつ開発組織のコンサルティング的なこともしていました。キューでタスクを分割する仕組みが思ったより快適すぎるので今後もっと使っていきたいと思いました。\n最近のPythonは型検査にasync/awaitとか使えて快適ですね。開発環境はryeで、black+mypy+ruff で各種検査を回しまくるとVSCodeで自動修正やら補完やらが効きまくって今までのPythonとは別世界です。強いて言えば各種ライブラリ（特にGoogle系）が最新のあれこれに対応していなかったりするのが難点ですね。\nGitHub Copliotが優秀すぎてコードの書き方より指示コメントの書き方がうまくなってきました。テストケースなんかも半自動生成できて、ちまちま作ってたようなものがどんどん楽になりますね。CodeじゃないVIsual Studioだと標準で入っているので、Unityを書くのとかでもものすごく楽になりました。知ってるか知らないか、知っていたら勝ちみたいな領域で勝負していた方々は今後辛いんじゃないでしょうか。\nSNS断ち（特にX）\nもう存在を忘れられているかと思いますが、結構前からSNSをほぼ引退しました。X（旧Twitter）もFacebookも過去の投稿をほぼ全て削除してありますし、特殊な事情がない限り告知以外の投稿をすることはもうありません。この記事の通知は流れているはずなので、https://x.com/nazo は告知用アカウントだと思ってください。\n理由としては、コロナ禍あたりからの空気の変化により、少なくともXを使い続けるのは自分にとってメリットよりデメリットのほうが上回ってきたからです。X社関係の騒動とはあまり関係ありません。\nこのブログはSNSではないので、基本的にこのブログは更新し続けるつもりです。\n一応Blueskyのアカウント（ https://bsky.app/profile/nazonazo.bsky.social ）も取得してあり、万が一普段遣いとして復帰したくなった場合はこちらを使うかもしれませんが、まあそれも今のところはなさそうです。\nSNS断ちをして思ったことは、思ったよりSNSを見てメールをくれたり連絡をしてくれたりする人というのはいたんだなということです。SNSを動かしている間はそれなりに反応があったのですが、断ってからはスパム的なもの以外は全く来なくなってしまいました。まあブログくらい書いていればもう少し違うのでしょうが…。\n交友関係もほぼ断ってしまったので、すっかりお仕事の話も途絶えてしまいました。難しい話です。\n今後について\n今の生活はとても自分に合っているので、できれば今の生活を続けていきたいのですが、特にこの先の見通しもないし収入面の不安もあるので難しそうです。\n自分ももうすぐ42歳になり、日に日に体力も衰え、絶対にこれをやるんだ！みたいなモチベーションはもうないのですが、成功事例も増えてきましたし、自分にしかできないことも少なくないはずなので、淡々とできることをこなしていこうと思います。\nお仕事募集中\n引き続きお仕事を募集しております。週２〜４くらいまで・フルリモート・単価多分そこそこ高め？です。解決できる課題などは\nhttps://nazo.dev/profile をご覧下さい。フルタイム正社員でないからこそできる内容をメインにしています。\n各種SNSのDMでご連絡をお待ちしております。","summary":"2022年 : https://nazo.hatenablog.com/entry/2022-works 2021年 : https://nazo.hatenablog.com/entry/2021-works 2020年 : https://nazo.hatenablog.com/entry/2020-works 2019年 : https://nazo.hatenablog.com/entry/goodbye-uuum 何してたの？ 一応、仕事しています。 あまり細かいことは言えないのですが、PythonでGraphQLでBigQuery x BigTableでPub/Subで…とかしつつ…","id":"hatenablog://entry/6801883189057845489","isoDate":"2023-12-29T03:00:00.000Z"},{"title":"webtransport-goでチャットを作ってみた","link":"https://nazo.hatenablog.com/entry/webtransport-go-chat","pubDate":"2023-01-27T08:30:00.000Z","author":"nazone","content":"<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fnazo%2Fwebtransport-go-chat\" title=\"GitHub - nazo/webtransport-go-chat\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\" loading=\"lazy\"></iframe><cite class=\"hatena-citation\"><a href=\"https://github.com/nazo/webtransport-go-chat\">github.com</a></cite></p>\n\n<p><span itemscope itemtype=\"http://schema.org/Photograph\"><img src=\"https://cdn-ak.f.st-hatena.com/images/fotolife/n/nazone/20230127/20230127163228.png\" width=\"1200\" height=\"409\" loading=\"lazy\" title=\"\" class=\"hatena-fotolife\" itemprop=\"image\"></span></p>\n\n<p>突然興味が出てきて書きましたが特に実用性はありません。webtransport-goがそれなりに使えるのかどうか調べるために書いたものです。</p>\n\n<p><a href=\"https://github.com/quic-go/webtransport-go\">webtransport-goは紆余曲折あって（？）quic-goに取り込まれたようですが</a>、中のファイルがまだ <code>github.com/marten-seemann/webtransport-go</code> のままなので（2023年1月27日現在）、こちらの名前でimportするのが良いです。修正を投げようとも思いましたが関連する他<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA\">リポジトリ</a>も全て変わっていないので、そのうち修正されるのを待とうと思います。</p>\n\n<p>切断周りの対応はちゃんと書いていません。</p>\n\n<p>チャットメッセージはUnidirectional Streamでやりとりしています。<a href=\"https://www.ietf.org/archive/id/draft-lcurley-warp-00.html\">一部で話題のTwitchのWarp</a>もUnidirectionalで実装されているようです。webtransport-goはDatagramはまだ未対応のようです。</p>\n\n<p>WebTransport自体はコネクションさえ確立されれば後はQUICなので、どうしてもブラウザ上でやりたいことがなければ普通にQUICについて調査することをフォーカスしたほうが良さそうです。ブラウザならではで想定できそうなのはやはり<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/Warp\">Warp</a>のような動画配信でしょうか。WebCodecsと組み合わせて実装するようです。</p>\n\n<h1 id=\"参考記事\">参考記事</h1>\n\n<p><iframe src=\"https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Falivelime%2Fitems%2F539383fd9fdf06169211\" title=\"WebTransportでもテキストチャットがしたい!(WebSocket比較あり) - Qiita\" class=\"embed-card embed-webcard\" scrolling=\"no\" frameborder=\"0\" style=\"display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;\" loading=\"lazy\"></iframe><cite class=\"hatena-citation\"><a href=\"https://qiita.com/alivelime/items/539383fd9fdf06169211\">qiita.com</a></cite></p>\n","contentSnippet":"github.com\n\n突然興味が出てきて書きましたが特に実用性はありません。webtransport-goがそれなりに使えるのかどうか調べるために書いたものです。\nwebtransport-goは紆余曲折あって（？）quic-goに取り込まれたようですが、中のファイルがまだ github.com/marten-seemann/webtransport-go のままなので（2023年1月27日現在）、こちらの名前でimportするのが良いです。修正を投げようとも思いましたが関連する他リポジトリも全て変わっていないので、そのうち修正されるのを待とうと思います。\n切断周りの対応はちゃんと書いていません。\nチャットメッセージはUnidirectional Streamでやりとりしています。一部で話題のTwitchのWarpもUnidirectionalで実装されているようです。webtransport-goはDatagramはまだ未対応のようです。\nWebTransport自体はコネクションさえ確立されれば後はQUICなので、どうしてもブラウザ上でやりたいことがなければ普通にQUICについて調査することをフォーカスしたほうが良さそうです。ブラウザならではで想定できそうなのはやはりWarpのような動画配信でしょうか。WebCodecsと組み合わせて実装するようです。\n参考記事\nqiita.com","summary":"github.com 突然興味が出てきて書きましたが特に実用性はありません。webtransport-goがそれなりに使えるのかどうか調べるために書いたものです。 webtransport-goは紆余曲折あって（？）quic-goに取り込まれたようですが、中のファイルがまだ github.com/marten-seemann/webtransport-go のままなので（2023年1月27日現在）、こちらの名前でimportするのが良いです。修正を投げようとも思いましたが関連する他リポジトリも全て変わっていないので、そのうち修正されるのを待とうと思います。 切断周りの対応はちゃんと書いていませ…","id":"hatenablog://entry/4207112889957967595","isoDate":"2023-01-27T08:30:00.000Z"},{"title":"2022年の仕事と近況","link":"https://nazo.hatenablog.com/entry/2022-works","pubDate":"2022-12-29T03:00:00.000Z","author":"nazone","content":"<ul>\n<li>2021年 : <a href=\"https://nazo.hatenablog.com/entry/2021-works\">https://nazo.hatenablog.com/entry/2021-works</a></li>\n<li>2020年 : <a href=\"https://nazo.hatenablog.com/entry/2020-works\">https://nazo.hatenablog.com/entry/2020-works</a></li>\n<li>2019年 : <a href=\"https://nazo.hatenablog.com/entry/goodbye-uuum\">https://nazo.hatenablog.com/entry/goodbye-uuum</a></li>\n</ul>\n\n\n<h1 id=\"2022年の仕事\">2022年の仕事</h1>\n\n<p>去年からの続きの仕事のみで、大きく話せるようなことは特にありません。仕事をしていないわけではないですが、一度区切りをつけて来年からは大幅縮小になる予定です。</p>\n\n<h1 id=\"近況\">近況</h1>\n\n<p>2022年は引っ越したりしていました。一応首都圏ではあるものの、通勤することを完全に捨てた場所にいます。その代わり仕事部屋を手に入れたので、リモートワークで会議が頻繁に発生することにも対応できることになりました。</p>\n\n<p>去年今年と辛いことが続いていますが、来年は本厄らしいのでもうだめかもしれません。がんばります。</p>\n\n<h1 id=\"まとめ\">まとめ</h1>\n\n<p>今後はブログを中心に情報発信を行っていこうと思います。技術的な話は <a href=\"https://zenn.dev/nazo\">Zenn</a> にも転載していますので、技術的な話のみ読みたい方はそちらをフォローしてください。</p>\n\n<p>来年からの予定は今のところ未定なので、週２〜３くらいでの案件を引き続き募集しております。詳しくは\n<a href=\"https://nazo.dev/\">https://nazo.dev/</a> をご覧下さい。</p>\n","contentSnippet":"2021年 : https://nazo.hatenablog.com/entry/2021-works\n2020年 : https://nazo.hatenablog.com/entry/2020-works\n2019年 : https://nazo.hatenablog.com/entry/goodbye-uuum\n2022年の仕事\n去年からの続きの仕事のみで、大きく話せるようなことは特にありません。仕事をしていないわけではないですが、一度区切りをつけて来年からは大幅縮小になる予定です。\n近況\n2022年は引っ越したりしていました。一応首都圏ではあるものの、通勤することを完全に捨てた場所にいます。その代わり仕事部屋を手に入れたので、リモートワークで会議が頻繁に発生することにも対応できることになりました。\n去年今年と辛いことが続いていますが、来年は本厄らしいのでもうだめかもしれません。がんばります。\nまとめ\n今後はブログを中心に情報発信を行っていこうと思います。技術的な話は Zenn にも転載していますので、技術的な話のみ読みたい方はそちらをフォローしてください。\n来年からの予定は今のところ未定なので、週２〜３くらいでの案件を引き続き募集しております。詳しくは\nhttps://nazo.dev/ をご覧下さい。","summary":"2021年 : https://nazo.hatenablog.com/entry/2021-works 2020年 : https://nazo.hatenablog.com/entry/2020-works 2019年 : https://nazo.hatenablog.com/entry/goodbye-uuum 2022年の仕事 去年からの続きの仕事のみで、大きく話せるようなことは特にありません。仕事をしていないわけではないですが、一度区切りをつけて来年からは大幅縮小になる予定です。 近況 2022年は引っ越したりしていました。一応首都圏ではあるものの、通勤することを完全に捨てた場所に…","id":"hatenablog://entry/4207112889941404490","isoDate":"2022-12-29T03:00:00.000Z"},{"creator":"nazo","title":"最近の Terraform のディレクトリ構造の分け方","link":"https://zenn.dev/nazo/articles/eac2082a073365","pubDate":"Fri, 23 Dec 2022 05:02:40 GMT","enclosure":{"url":"https://res.cloudinary.com/zenn/image/upload/s--H7Q28qlo--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:%25E6%259C%2580%25E8%25BF%2591%25E3%2581%25AE%2520Terraform%2520%25E3%2581%25AE%25E3%2583%2587%25E3%2582%25A3%25E3%2583%25AC%25E3%2582%25AF%25E3%2583%2588%25E3%2583%25AA%25E6%25A7%258B%25E9%2580%25A0%25E3%2581%25AE%25E5%2588%2586%25E3%2581%2591%25E6%2596%25B9%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nazo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dZb0xlSnJaX3FJdGlhbThncXZyVkhIVUxRSXFWcUs5VGNqaXp1MWo4PXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png","length":"0","type":"image/png"},"dc:creator":"nazo","content":"※この記事の内容は https://nazo.hatenablog.com/entry/terraform-2022 と同一です。\n\n 概要\nmodules / envs / apps でディレクトリを切っています。\n\n 基礎知識： modules と envs\n誰が言い出したのかはわかりませんが、modules と envs に分けるパターンはよく見かけます。\nmodules は文字通りモジュールを配置するところで、 envs はそれらを使う環境が入っているという感じです。\n.\n├── modules\n│   ├── vpc\n│   ├── app\n│   └── db\n└── env...","contentSnippet":"※この記事の内容は https://nazo.hatenablog.com/entry/terraform-2022 と同一です。\n\n 概要\nmodules / envs / apps でディレクトリを切っています。\n\n 基礎知識： modules と envs\n誰が言い出したのかはわかりませんが、modules と envs に分けるパターンはよく見かけます。\nmodules は文字通りモジュールを配置するところで、 envs はそれらを使う環境が入っているという感じです。\n.\n├── modules\n│   ├── vpc\n│   ├── app\n│   └── db\n└── env...","guid":"https://zenn.dev/nazo/articles/eac2082a073365","isoDate":"2022-12-23T05:02:40.000Z"},{"title":"最近の Terraform のディレクトリ構造の分け方","link":"https://nazo.hatenablog.com/entry/terraform-2022","pubDate":"2022-12-23T03:00:00.000Z","author":"nazone","content":"<h1 id=\"概要\">概要</h1>\n\n<p>modules / envs / apps で<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8\">ディレクト</a>リを切っています。</p>\n\n<h1 id=\"基礎知識-modules-と-envs\">基礎知識： modules と envs</h1>\n\n<p>誰が言い出したのかはわかりませんが、modules と envs に分けるパターンはよく見かけます。</p>\n\n<p>modules は文字通りモジュールを配置するところで、 envs はそれらを使う環境が入っているという感じです。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>.\n├── modules\n│   ├── vpc\n│   ├── app\n│   └── db\n└── envs\n    ├── production\n    └── staging</pre>\n\n\n<p>modules の抽象度は、 <a href=\"https://12factor.net/ja/backing-services\">12 factor app の バックエンドサービス</a> くらいのイメージを持っていればいいのではないかと思います。<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VPC\">VPC</a> みたいな基盤は特殊として、それ以外は「外しても使える程度」を意識するのが良いと思います。</p>\n\n<p>一般的に envs で書かれる tf は、modules を呼び出すだけにしておくのが良いと思います。直接リソースを書くのは最終手段です。</p>\n\n<h1 id=\"modules-と-envs-はわかるけど-apps-って何\">modules と envs はわかるけど apps って何？</h1>\n\n<p>全環境で <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VPC\">VPC</a> も DB も分けるなら必要ないですが、「複数のアプリで同一の DB を参照したい」というケースは多々あります。進捗が別々の環境を同時に作りたい場合などです。また、費用を節約するために同一の DB リソースを共有するという場合もあります。</p>\n\n<p>そのような状況を考えた時、「土台のバックエンドサービスと、自分で書いたアプリケーションは別の扱いにしたほうがいいのでは」となりました。この「土台のバックエンドサービス」が「envs」で、「自分で書いたアプリケーション」が「apps」になります。</p>\n\n<p>「envs」は、<a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VPC\">VPC</a> や DB などがまとまったもので、「apps」はデプロイ単位で分けることになります。これにより、１つの <a class=\"keyword\" href=\"http://d.hatena.ne.jp/keyword/VPC\">VPC</a> や DB に、複数のアプリケーションを同居させることが簡単になります。</p>\n\n<pre class=\"code\" data-lang=\"\" data-unlink>.\n├── modules\n│   ├── vpc\n│   ├── app\n│   └── db\n├── apps\n│   ├── staging\n│   ├── production\n│   └── featurexxxx\n└── envs\n    ├── production\n    └── staging</pre>\n\n\n<p>「envs」以下より「apps」以下のほうが必ず数が多くなります。また、「apps」は「envs」の設定に依存しますが、逆の依存は必ず存在しないようにします。</p>\n","contentSnippet":"概要\nmodules / envs / apps でディレクトリを切っています。\n基礎知識： modules と envs\n誰が言い出したのかはわかりませんが、modules と envs に分けるパターンはよく見かけます。\nmodules は文字通りモジュールを配置するところで、 envs はそれらを使う環境が入っているという感じです。\n.\n├── modules\n│   ├── vpc\n│   ├── app\n│   └── db\n└── envs\n    ├── production\n    └── staging\nmodules の抽象度は、 12 factor app の バックエンドサービス くらいのイメージを持っていればいいのではないかと思います。VPC みたいな基盤は特殊として、それ以外は「外しても使える程度」を意識するのが良いと思います。\n一般的に envs で書かれる tf は、modules を呼び出すだけにしておくのが良いと思います。直接リソースを書くのは最終手段です。\nmodules と envs はわかるけど apps って何？\n全環境で VPC も DB も分けるなら必要ないですが、「複数のアプリで同一の DB を参照したい」というケースは多々あります。進捗が別々の環境を同時に作りたい場合などです。また、費用を節約するために同一の DB リソースを共有するという場合もあります。\nそのような状況を考えた時、「土台のバックエンドサービスと、自分で書いたアプリケーションは別の扱いにしたほうがいいのでは」となりました。この「土台のバックエンドサービス」が「envs」で、「自分で書いたアプリケーション」が「apps」になります。\n「envs」は、VPC や DB などがまとまったもので、「apps」はデプロイ単位で分けることになります。これにより、１つの VPC や DB に、複数のアプリケーションを同居させることが簡単になります。\n.\n├── modules\n│   ├── vpc\n│   ├── app\n│   └── db\n├── apps\n│   ├── staging\n│   ├── production\n│   └── featurexxxx\n└── envs\n    ├── production\n    └── staging\n「envs」以下より「apps」以下のほうが必ず数が多くなります。また、「apps」は「envs」の設定に依存しますが、逆の依存は必ず存在しないようにします。","summary":"最近の Terraform のディレクトリ構造の分け方について解説します。","id":"hatenablog://entry/4207112889947280382","isoDate":"2022-12-23T03:00:00.000Z"},{"creator":"nazo","title":"git の pre-commit hook はなるべく使わないほうがいいのでは","link":"https://zenn.dev/nazo/articles/42c8ef04cd049e","pubDate":"Tue, 13 Dec 2022 03:00:00 GMT","enclosure":{"url":"https://res.cloudinary.com/zenn/image/upload/s--9ESOs9Eu--/c_fit%2Cg_north_west%2Cl_text:notosansjp-medium.otf_55:git%2520%25E3%2581%25AE%2520pre-commit%2520hook%2520%25E3%2581%25AF%25E3%2581%25AA%25E3%2582%258B%25E3%2581%25B9%25E3%2581%258F%25E4%25BD%25BF%25E3%2582%258F%25E3%2581%25AA%25E3%2581%2584%25E3%2581%25BB%25E3%2581%2586%25E3%2581%258C%25E3%2581%2584%25E3%2581%2584%25E3%2581%25AE%25E3%2581%25A7%25E3%2581%25AF%2Cw_1010%2Cx_90%2Cy_100/g_south_west%2Cl_text:notosansjp-medium.otf_37:nazo%2Cx_203%2Cy_121/g_south_west%2Ch_90%2Cl_fetch:aHR0cHM6Ly9saDMuZ29vZ2xldXNlcmNvbnRlbnQuY29tL2EtL0FPaDE0R2dZb0xlSnJaX3FJdGlhbThncXZyVkhIVUxRSXFWcUs5VGNqaXp1MWo4PXMyNTAtYw==%2Cr_max%2Cw_90%2Cx_87%2Cy_95/v1627283836/default/og-base-w1200-v2.png","length":"0","type":"image/png"},"dc:creator":"nazo","content":"※この記事の内容は https://nazo.hatenablog.com/entry/dont-use-pre-commit-hook と同一です。\ngit に pre-commit hook という、コミット直前に何かのプログラムを実行する機能があります。これを用いて lint や test を実行したりすることがありますが、この利用は極力避けたほうが良いのではと考えています。\n\n なぜ？\n\n個人の環境で実行した結果は信用できない\nローカルコンピューターで待たせてはいけない\npre-commit の挙動や中断などで動作が怪しくなることがある\n\n\n 個人の環境で実行した結果は信用できな...","contentSnippet":"※この記事の内容は https://nazo.hatenablog.com/entry/dont-use-pre-commit-hook と同一です。\ngit に pre-commit hook という、コミット直前に何かのプログラムを実行する機能があります。これを用いて lint や test を実行したりすることがありますが、この利用は極力避けたほうが良いのではと考えています。\n\n なぜ？\n\n個人の環境で実行した結果は信用できない\nローカルコンピューターで待たせてはいけない\npre-commit の挙動や中断などで動作が怪しくなることがある\n\n\n 個人の環境で実行した結果は信用できな...","guid":"https://zenn.dev/nazo/articles/42c8ef04cd049e","isoDate":"2022-12-13T03:00:00.000Z"}]},"__N_SSG":true}